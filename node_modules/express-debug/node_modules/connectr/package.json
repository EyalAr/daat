{
  "name": "connectr",
  "version": "0.0.1",
  "description": "Connect wrapper that adds ability to insert middleware at arbitrary positions.\"",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": "",
  "keywords": [
    "connect",
    "express"
  ],
  "author": {
    "name": "Olivier Lalonde",
    "email": "olalonde@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "connect": "~2.7.9",
    "debug": "~0.7.2"
  },
  "readme": "# Connectr for [Connect](https://github.com/senchalabs/connect) (Node.js)\n\nConnectr is a layer on top of [Connect](https://github.com/senchalabs/connect) that allows the insertion/removal of middlewares\nafter the stack has been built.\n\n# Install\n\n    npm install connectr\n\n# Usage\n\n```javascript\nvar connectr = require('connectr')(app);\n\n// Add labeled middleware\nconnectr.use(middleware).as(label);\n\n// Insert before middleware\nconnectr.before(label).use(middleware).as(label);\n\n// Insert after middleware\nconnectr.after(label).use(middleware);\n\n// Insert at beginning of stack\nconnectr.first().use(middleware);\n\n// Remove middleware\nconnectr.remove(label);\n\n// the .as, .before and .after calls are optional\n\n// have a problem? try console.log(app.stack)\n```\n\n# Simple Example\n\n```javascript\nvar connect = require('connect'),\nvar app = connect();\nvar connectr = require('connectr')(app);\n\nconnectr.use(connect.cookieParser).as('cookieParser');\n\n/* ... */\n\nconnectr.before('cookieParser').use(function (req, res, next) {\n  console.log('Before cookie parser...');\n  next();\n}).as('log before cookie parser');\n\n```\n\n# Kitchen Sink Example \n\n```javascript \nvar http = require('http'),\n  connect = require('connect'),\n  app = connect(),\n  connectr = require('connectr')(app);\n\nvar cookieParser = connect.cookieParser();\n\n// we need to manually label middlewares\ncookieParser.label = 'cookieParser';\n\napp.use(cookieParser);\n\nconnectr.before('cookieParser').use(function (req, res, next) {\n  console.log('Middleware before cookie parser.');\n  next();\n});\n\nconnectr.after('cookieParser').use(function (req, res, next) {\n  console.log('Middleware after cookie parser.');\n  next();\n});\n\n// you can also use connectr to label your middlewares\n// instead of labeling them manually as above\n\nconnectr.use(connect.bodyParser()).as('bodyParser');\n\nconnectr.use(function (req, res, next) {\n  console.log('Last middleware');       \n  res.end('Done!');\n});\n\nconnectr.before('bodyParser').use(function (req, res, next) {\n  console.log('Before body parser');\n  next();\n}).as('beforeBodyParser');\n\nconnectr.after('beforeBodyParser').use(function (req, res, next) {\n  console.log('I should be called after beforeBodyParser but before bodyParser');\n  next();\n}).as('betweenBeforeBodyParserAndBodyParser');\n\nconnectr.after('bodyParser').use(function (req, res, next) {\n  console.log('After body parser');\n  next();\n}).as('afterBodyParser');\n\n//console.log(app.stack);\n\nhttp.createServer(app).listen(3000);\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "connectr@0.0.1",
  "dist": {
    "shasum": "7320ea43a181586cb7af8282f6689330e31ab64c"
  },
  "_from": "connectr@0.0.1",
  "_resolved": "https://registry.npmjs.org/connectr/-/connectr-0.0.1.tgz"
}
